* How WWW::Asana Works

The WWW::Asana client library elegantly corresponds to the architecture of the RESTful Asana API.

** Object Construction

Given a request that looks like:

  GET https://app.asana.com/api/1.0/users/me

One may expect a response that looks like:

  { 
    "data": {
      "id": 1404297026925,
      "name": "Meng WONG",
      "email": "mengwong@jfdi.asia",
      "workspaces": [
        { 
          "id": 1404297026930,
          "name": "JFDI.Asia"
        },
        { 
          "id": 498346170860,
          "name": "Personal Projects"
        }
      ]
    }

To construct the request and instantiate the response objects, one simply says:

  my $wa = WWW::Asana->new();
  my $me = $wa->do('User', 'GET', 'users', 'me')

What happens? The do() method:

- constructs a request object
- executes it
- pours the response into WWW::Asana::User (the "to_type")
- unwraps it, and
- hands back the result, in the form of a WWW::Asana::User object.

Any sub-objects returned in the response are instantiated and made part of the main object.

The call stack looks like this:

**** WWW::Asana->do()
***** WWW::Asana->request()
****** WWW::Asana->get_request()
******* WWW::Asana::Request->new()
******* WWW::Asana::Request->http_request()
sets opt_fields according to the to_type
****** WWW::Asana::Response->new(http_response)
BTW, the response object preserves a handle to the original $wa, in its "client" attribute.
***** WWW::Asana::Response->result()
returns one or more "to_type" instances, depending on whether the first argument to do() was "Thing" or "[Thing]".
****** WWW::Asana::User->new_from_response()
which is actually handled by
****** WWW::Asana::Role::NewFromResponse->new_from_response()
walks through the sub-objects returned under /data/ and recursively calls
******* WWW::Asana::Role::NewFromResponse->new_from_response()
on each sub-object, passing along "client", "workspace", and "response" from the outer.

** Extending WWW::Asana

The Asana API may grow to describe new object types and relationships.

For example, since WWW::Asana was originally written, the idea of /subtasks/ appeared.

The WWW::Asana class hierarchy is efficient. Thanks to Roles such as NewFromResponse, HasFollowers, and HasStories, any changes to the Asana API can be captured with a minimum of code.

When new object types appear, you should only need to look at:
- NewFromResponse::new_from_response() :: multi_mapping, single_mapping, needs_workspace
- Request::_build__http_request() :: the definition of opt_fields.

*** TODO Arguably, the opt_fields definitions should be refactored out of Request and parked inside each class.

** What do the Roles do?

There are three types of roles:

*** Can

**** CanCreate pushes a newly created instance to the server.

At present the only class that composes CanCreate is Task, even though many other object types can be created. Task itself has create_story() which creates a Story, yet Story does not compose CanCreate.

This seems inconsistent and maybe should be refactored.

The HTTP verb is POST.

**** CanReload retrieves a newer instance of itself from the server.

The following classes compose CanReload.

- Project
- Story
- Tag
- Task
- User

The HTTP verb is GET.

**** CanUpdate updates a locally modified instance to the server. 
 
The following classes compose CanUpdate.

- Project
- Tag
- Task
- Workspace

The HTTP verb is PUT.

*** Has

*** New

* commentary by mengwong [2013-02-10 Sun]

My project org-asana relies on Getty's www-asana.

In the course of developing org-asana, I encountered the motivation for two extensions to www-asana.

After some discussion of these extensions with Getty, the following theory emerged:

** Caching and Sessions

Consider that www-asana may be used in a short session or a long session.

In a short session, the client connects, performs a handful of operations, and disconnects shortly thereafter.

In a long session, the client connects, performs a handful of operations, does some other work, and performs more operations some time later. A client-side instance constitutes a local cache of a server object. Given that Asana is a multi-user application, long sessions in particular run the risk of caches going stale.

To minimize this risk, the client application might aggressively re-download objects.

As Asana tends to return sub-objects, to be consistent with aggressive re-downloading, the client may set the [[http://developer.asana.com/documentation/#Options][*fields* and *expand* options]].

** Mode: Singleton Instance

*** Motivation

A User has-many Workspaces.

A Workspace has-many Projects.

A Project has-many Tasks.

A Task has-many followers, which are themselves Users.

In CS terms, we would say that the object graph is cyclic, as opposed to a DAG.

By default, www-asana creates a new (client-side) instance of the same (server-side) object each time that object is returned by the server. In other words, if Task_1 and Task_2 are both Followed by User_1, each of the two Task instances will create and refer to a separate instance of the User_1 sub-object.

This state of affairs leads to rather bushy proliferation of objects.

*** New Behaviour

When creating your WWW::Asana object, say ->new(singleton_instance => 1).

In this mode, WWW::Asana maintains an object cache, so that both Task_1 and Task_2 refer to the same User_1 object. That singleton instance, in fact, be used whenever User_1 is mentioned.

*** Interaction with other features

The ->reload() method usually returns a new instance of that object, freshly downloaded from the server. When singleton_instance is enabled, the ->reload() method refreshes the existing instance with updated attributes.

*** Advisory

If your sessions are long, you should reload and reconsider application logic appropriately, rather than assuming that old caches are still valid.
 
** Mode: Lazy Expansion

*** Motivation

Every Asana object has an ID. Many Asana objects have other attributes, like "Name". But in Asana's /compact/ form, those other attributes are not always returned by the server.

The *expand* option is designed to force expansion of sub-objects -- at a cost. See the API documentation.

*** New Behaviour

When creating your WWW::Asana object, say ->new(lazy_compact => 1).

In this mode, WWW::Asana will not (in the Moo sense) /require/ expanded attributes at instance creation. Instances are content to be compact. Attributes will be loaded lazily. Method accessors will, if the attributes have not been previously been made available, force a reload of the expanded instance the first time they are called.

*** Interaction with other features

*** Advisory
