* How WWW::Asana Works

The WWW::Asana client library elegantly corresponds to the architecture of the RESTful Asana API.

** Object Construction

Given a request that looks like:

  GET https://app.asana.com/api/1.0/users/me

One may expect a response that looks like:

  { 
    "data": {
      "id": 1404297026925,
      "name": "Meng WONG",
      "email": "mengwong@jfdi.asia",
      "workspaces": [
        { 
          "id": 1404297026930,
          "name": "JFDI.Asia"
        },
        { 
          "id": 498346170860,
          "name": "Personal Projects"
        }
      ]
    }

To construct the request and instantiate the response objects, one simply says:

  my $wa = WWW::Asana->new();
  my $me = $wa->do('User', 'GET', 'users', 'me')

The $me is a WWW::Asana::User object with /id/, /name/, and /email/ attributes.

It also has a /workspaces/ attribute, which contains two sub-objects of type WWW::Asana::Workspace. Those workspace objects themselves each have a /name/ attribute.

The do() method:

- constructs a request object
- executes it
- pours the response into WWW::Asana::User (the "to_type")
- unwraps it, and
- hands back the result, in the form of a WWW::Asana::User object.

Any sub-objects returned in the response are instantiated and made part of the main object.

The call stack looks like this:

**** WWW::Asana->do()
***** WWW::Asana->request()
****** WWW::Asana->get_request()
******* WWW::Asana::Request->new()
******* WWW::Asana::Request->http_request()
sets opt_fields according to the to_type
****** WWW::Asana::Response->new(http_response)
BTW, the response object preserves a handle to the original $wa, in its "client" attribute.
***** WWW::Asana::Response->result()
returns one or more "to_type" instances, depending on whether the first argument to do() was "Thing" or "[Thing]".
****** WWW::Asana::User->new_from_response()
which is actually handled by
****** WWW::Asana::Role::NewFromResponse->new_from_response()
walks through the sub-objects returned under /data/ and recursively calls
******* WWW::Asana::Role::NewFromResponse->new_from_response()
on each sub-object, passing along "client", "workspace", and "response" from the outer.

** Extending WWW::Asana

The Asana API may grow to describe new object types and relationships.

For example, since WWW::Asana was originally written, the idea of /subtasks/ appeared.

The WWW::Asana class hierarchy is efficient. Thanks to Roles such as NewFromResponse, HasFollowers, and HasStories, any changes to the Asana API can be captured with a minimum of code.

When a new object type appears, obviously you need to create a new class for it. Beyond that, you should only need to look at:
- NewFromResponse::new_from_response() :: multi_mapping, single_mapping, needs_workspace
- WWW/Asana/*.pm :: classes may need to describe the new relationship in opt_fields.

** What do the Roles do?

| Class     | CanCreate | CanReload | CanUpdate | HasClient | HasFollowers | HasResponse | HasStories | NewFromResponse |
|-----------+-----------+-----------+-----------+-----------+--------------+-------------+------------+-----------------|
| User      |           |         1 |           |         1 |              |           1 |            |               1 |
| Workspace |           |           |         1 |         1 |              |           1 |            |               1 |
| Project   |           |         1 |         1 |         1 |            1 |           1 |          1 |               1 |
| Task      |         1 |         1 |         1 |         1 |            1 |           1 |          1 |               1 |
| Tag       |           |         1 |         1 |         1 |            1 |           1 |            |               1 |
| Story     |           |         1 |           |         1 |              |           1 |            |               1 |
| Request   |           |           |           |           |              |             |            |                 |
| Response  |           |           |           |         1 |              |             |            |                 |

There are three types of roles:

*** Can

**** CanCreate pushes a newly created instance to the server. (POST)

At present the only class that composes CanCreate is Task, even though many other object types can be created. Task itself has create_story() which creates a Story, yet Story does not compose CanCreate.

This seems inconsistent and maybe should be refactored.

**** CanReload retrieves a newer instance of itself from the server. (GET)

***** TODO Why doesn't Workspace compose CanReload? 

**** CanUpdate updates a locally modified instance to the server. (PUT)

*** Has

**** HasClient objects have a *client* attribute -- the main WWW::Asana client which handles ->do().

**** HasFollowers objects have a *followers* attribute, which are WWW::Asana::Users.

**** HasResponse objects have a *response* attribute.

**** HasStories objects have a *stories* method to retrieve associatd stories, and a *comment* method to create new stories.

*** New

**** NewFromResponse magicks an API JSON response into the appropriate object and sub-objects.

